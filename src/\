from datetime import datetime, timedelta
from rest_framework import (
        generics, viewsets, permissions)
from rest_framework.response import Response

from services.helpers.exchanger import ExchangeRates


class DashboardViewsets(generics.ListAPIView, viewsets.GenericViewSet):
    permission_classes = (permissions.AllowAny,)
    
    sample_response = None

    def get_percentage_rate(self, a, b):
        distance = b-a
        return 0 if distance == 0 else round(distance/a, 4) * 100
    
    def get_response(self, data): 
        return {
            "gte": data[0][0],
            "lte": data[1][0],
            "data": [
                {
                    "bcc": "USD",
                    "scc": "IDR",
                    "exchange": {
                        "rate": data[1][1],
                        "one_day_before": data[0][1],
                        "percentage": self.get_percentage_rate(
                            a=data[0][1],
                            b=data[1][1]),
                        "diff": data[1][1] - data[0][0]
                    }
                }
            ]
        }

    def list(self, request, *args, **kwargs):
        usd_rates = ExchangeRates()
        jpy_rates = ExchangeRates()
        params = {
                "gte": datetime.today().date() + timedelta(-1),
                "lte": datetime.today().date(),
                "scc": request.GET.get('scc') or "IDR"
            }
        usd_rates.fetch_date_range_histories(**{**params, "bcc": "USD"})
        jpy_rates.fetch_date_range_histories(**{**params, "bcc": "JPY"})
        response = self.get_response(usd_rates.data)
        return Response(response)
        n_rates = len(exchange.data)
        today = exchange.data[n_dates-1:]
        return Response(exchange.data[len(exchange.data)-7:])
